stages:
  - dependencies
  - checks
  - build
  - sign_builds
  - automated_tests

image: registry.gitlab.com/eyeo/docker/adblockplussbrowser_gitlab-runner:202112.1

variables:
  APK_OUTPUT_PATH: "app/build/outputs/apk"
  MAPPING_OUTPUT_PATH: "app/build/outputs/mapping"

cache: &global_cache
  key:
    files:
      - buildSrc/src/main/kotlin/Deps.kt
  paths:
    - .android-sdk/
    - .gradle/
  policy: pull

.template:environment:
  before_script:
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.console=plain"
    - '[ -d .android-sdk ] || cp -a /opt/android-sdk ./.android-sdk'
    - export ANDROID_SDK_ROOT=`pwd`/.android-sdk

dependencies:
  stage: dependencies
  extends: .template:environment
  script:
    - mkdir -p ${GRADLE_USER_HOME}
    - ./gradlew tasks dependencies
  cache:
    <<: *global_cache
    policy: pull-push
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"'
      changes:
        - buildSrc/src/main/kotlin/Deps.kt
        - gradle/wrapper/gradle-wrapper.properties
        - buildSrc/build.gradle.kts
    - if: '$GENERATE_DEPENDENCIES_CACHE == "true"'

checks:lint:
  extends: .template:environment
  stage: checks
  script:
    - ./gradlew lint
  artifacts:
    paths:
      - ./*/build/reports/lint-results.*
    when: on_failure
  rules:
    - when: on_success

checks:detekt:
  extends: .template:environment
  stage: checks
  script:
    - ./gradlew detekt
  artifacts:
    paths:
      - build/reports/detekt/detekt.*
    when: always
  rules:
    - when: on_success

checks:unit-test:
  extends: .template:environment
  stage: checks
  script:
    - ./gradlew test jacobo checkCoverage
  artifacts:
    when: always
    reports:
      junit: core/build/test-results/**/TEST*.xml
      coverage_report:
        coverage_format: cobertura
        path: core/build/reports/cobertura.xml

build:
  extends: .template:environment
  stage: build
  script:
    - mkdir -p "app/src/worldAbp/debug"
    - cat "$GOOGLE_SERVICES_ABP_DEBUG" > "$(pwd)/app/src/worldAbp/debug/google-services.json"
    - mkdir "app/src/worldAbp/release"
    - cat "$GOOGLE_SERVICES_ABP_RELEASE" > "$(pwd)/app/src/worldAbp/release/google-services.json"
    - mkdir -p "app/src/worldAdblock/debug"
    - cat "$GOOGLE_SERVICES_ADBLOCK_DEBUG" > "$(pwd)/app/src/worldAdblock/debug/google-services.json"
    - mkdir "app/src/worldAdblock/release"
    - cat "$GOOGLE_SERVICES_ADBLOCK_RELEASE" > "$(pwd)/app/src/worldAdblock/release/google-services.json"
    - mkdir -p "app/src/worldCrystal/debug"
    - cat "$GOOGLE_SERVICES_CRYSTAL_DEBUG" > "$(pwd)/app/src/worldCrystal/debug/google-services.json"
    - mkdir "app/src/worldCrystal/release"
    - cat "$GOOGLE_SERVICES_CRYSTAL_RELEASE" > "$(pwd)/app/src/worldCrystal/release/google-services.json"
    - ./gradlew assemble # build both debug and release for all flavors
  artifacts:
    paths:
      # saving all flavors with apks and `output-metadata.json`
      - $APK_OUTPUT_PATH
      - $MAPPING_OUTPUT_PATH
  rules:
    - when: on_success

sign_apks:
  stage: "sign_builds"
  variables:
    GIT_STRATEGY: none
  cache: [ ]
  tags:
    - "apk_signer_apk-signing-2.uplink.eyeo.it"
  before_script:
    - "rm -fr ./*_SIGNED.apk"
  script:
    - |
      while read flavor key; do
        unsigned_apk=$(find app/build/ -iname "app-world-${flavor}-release-unsigned.apk")
        signed_apk="$(basename "${unsigned_apk}"|sed 's/-unsigned.apk/_SIGNED.apk/')"
        echo "Signing $(basename ${unsigned_apk}) with ${key:-$flavor}"
        /usr/bin/env CREDENTIALS_FILE=${key:-$flavor} /usr/local/bin/apk_signer < ${unsigned_apk} > ${signed_apk}
      done <<EOF
      adblock
      crystal
      abp adblockplus
      EOF
  artifacts:
    paths:
      - ./*_SIGNED.apk
    expire_in: "1 week"
  rules:
    - when: on_success

# automated regression tests template using Appium
.template:automation:
  stage: automated_tests
  interruptible: true
  retry: 1
  variables:
    GIT_STRATEGY: "none"
    # overridable automation repo; url uses CI_JOB_TOKEN for temporary authorization
    GIT_AUTOMATION_REPO: "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/eyeo/distpartners/abp_si_automation"
    GIT_AUTOMATION_BRANCH: "main"
    # demo app debug apk
  before_script:
    - test -z ${SAUCE_USERNAME} && echo "echo SAUCE_USERNAME not set. Unable to run tests." && exit 1
    - test -z ${SAUCE_ACCESS_KEY} && echo "echo SAUCE_ACCESS_KEY not set. Unable to run tests." && exit 1
    - echo ${APK_NAME}
    - curl -u "${SAUCE_USERNAME}:${SAUCE_ACCESS_KEY}" --location --request POST 'https://api.eu-central-1.saucelabs.com/v1/storage/upload'
      --form ${CURL_PAYLOAD} --form 'name="${APK_NAME}"'
    # we are not using submodules, because automation is not a part of repository functionality
  script:
    # its rather a standalone set of scripts
    - git clone $GIT_AUTOMATION_REPO automation
    - cd automation
    - git checkout ${GIT_AUTOMATION_BRANCH:-main}
    # Launch an instance of gradle for each bunch of tags we want to test
    - set +e
    - pids=""
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do export PLATFORM_VERSION
        echo Starting job for version ${PLATFORM_VERSION}
        (./gradlew ${GRADLE_TASK} &> platform_version-${PLATFORM_VERSION}.log ; echo $? > result_${PLATFORM_VERSION}) &
        pids="$pids $!"
      done
    - wait $pids
    # Check for any failures and re-run them
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do if [ -s target/rerun${PLATFORM_VERSION}.txt ] ; then
          echo "Rerunning failed test cases for platform version ${PLATFORM_VERSION}"
          mv target/rerun${PLATFORM_VERSION}.txt target/rerun.txt
          ./gradlew rerunFailed
          echo $? > result_${PLATFORM_VERSION}
          rm -f target/rerun.txt
        fi
      done
    # check the exit codes of all processes were 0
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do test $(cat result_${PLATFORM_VERSION}) = 0
      done
  after_script:
    - cd automation
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do
        echo "**********************************"
        echo "Logs for tests with platform version ${PLATFORM_VERSION}"
        echo "**********************************"
        cat platform_version-${PLATFORM_VERSION}.log
      done

abp_regression:
  extends: .template:automation
  needs:
    - build # we can run this on debug apk
  variables:
    APK_NAME: "app-world-abp-debug.apk"
    CURL_PAYLOAD: 'payload=@"app/build/outputs/apk/worldAbp/debug/$APK_NAME"'
    PLATFORM_VERSIONS: "10"
    GRADLE_TASK: "regression"
  rules:
    - if: '$FORCE_REGRESSION == "true"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'

ab_regression:
  extends: .template:automation
  needs:
    - build
    - abp_regression # we can run this on debug apk
  variables:
    APK_NAME: "app-world-adblock-debug.apk"
    CURL_PAYLOAD: 'payload=@"app/build/outputs/apk/worldAdblock/debug/$APK_NAME"'
    PLATFORM_VERSIONS: "10"
    GRADLE_TASK: "regression"
  rules:
    - if: '$FORCE_REGRESSION == "true"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'

crystal_regression:
  extends: .template:automation
  needs:
    - build
    - ab_regression # we can run this on debug apk
  variables:
    APK_NAME: "app-world-crystal-debug.apk"
    CURL_PAYLOAD: 'payload=@"app/build/outputs/apk/worldCrystal/debug/$APK_NAME"'
    PLATFORM_VERSIONS: "10"
    GRADLE_TASK: "regression"
  rules:
    - if: '$FORCE_REGRESSION == "true"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'

smoke_tests:
  extends: .template:automation
  needs:
    - build # we can run this on debug apk
  variables:
    APK_NAME: "app-world-abp-debug.apk"
    CURL_PAYLOAD: 'payload=@"app/build/outputs/apk/worldAbp/debug/$APK_NAME"'
    PLATFORM_VERSIONS: "7 8 9 11"
    GRADLE_TASK: "multiAPI"
  rules:
    - if: '$FORCE_REGRESSION == "true"'
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == "dev"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

functional_tests:
  extends: .template:automation
  needs:
    - build # we can run this on debug apk
  variables:
    APK_NAME: "app-world-abp-debug.apk"
    CURL_PAYLOAD: 'payload=@"app/build/outputs/apk/worldAbp/debug/$APK_NAME"'
    PLATFORM_VERSIONS: "10"
    GRADLE_TASK: "functional"
  rules:
    - if: '$FORCE_FUNCTIONAL == "true"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'

samsung_filter_tests:
  stage: automated_tests
  interruptible: true
  needs:
    - build # we can run this on debug apk
  tags:
    - "ce11171b5399805a0c"
  retry: 1
  image: "registry.gitlab.com/eyeo/docker/appium:1.20.2"
  allow_failure: true
  variables:
    GIT_STRATEGY: "none"
    PLATFORM_VERSIONS: "9"
    GIT_AUTOMATION_REPO: "https://gitlab-ci-token:${CI_JOB_TOKEN}@gitlab.com/eyeo/distpartners/samsung_automation"
    GIT_AUTOMATION_BRANCH: "main"
  before_script:
    - apt-get -y update
    - apt-get -y install openjdk-8-jdk git
    - apt-get -y install net-tools
    - echo "Using android device with serial ${ANDROID_SERIAL}"
    - adb devices
    - adb shell getprop | egrep "ro.product.manufacturer|ro.product.model|ro.build.version.release|ro.vendor.build.version.sdk"
  script:
    - mkdir appium
    - /root/entry_point.sh &> appium/appium.log &
    - echo $! > appium_pid
    - git clone $GIT_AUTOMATION_REPO si_automation
    - cd si_automation
    - git checkout ${GIT_AUTOMATION_BRANCH:-main}
    - OTHER_TEST_APK=$(find / -name "*app-world-abp-debug.apk")
    - CHROMEDRIVER_EXECUTABLE=$(find / -name "*chromedriver96")
    - export OTHER_TEST_APK
    - export CHROMEDRIVER_EXECUTABLE
    - echo CHROMEDRIVER_EXECUTABLE $CHROMEDRIVER_EXECUTABLE
    - echo OTHER_TEST_APK $OTHER_TEST_APK
    - pwd
    # Launch an instance of gradle for each bunch of tags we want to test
    - netstat -tulpn
    - set +e
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do export PLATFORM_VERSION
        echo Starting job for version ${PLATFORM_VERSION}
        (APPIUM_HOST="127.0.0.1:4723" ./gradlew filterTests &> platform_version-${PLATFORM_VERSION}.log ; echo $? > result_${PLATFORM_VERSION}) &
        pids="$pids $!"
      done
    - wait $pids
    # Check for any failures and re-run them
#    - |
#      for PLATFORM_VERSION in $PLATFORM_VERSIONS
#        do if [ -s target/rerun${PLATFORM_VERSION}.txt ] ; then
#          echo "Rerunning failed test cases for platform version ${PLATFORM_VERSION}"
#          mv target/rerun${PLATFORM_VERSION}.txt target/rerun.txt
#          ./gradlew rerunFailed
#          echo $? > result_${PLATFORM_VERSION}
#          rm -f target/rerun.txt
#        fi
#      done
    # check the exit codes of all processes were 0
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do test $(cat result_${PLATFORM_VERSION}) = 0
      done
  after_script:
    - cd si_automation
    - |
      for PLATFORM_VERSION in $PLATFORM_VERSIONS
        do
        echo "**********************************"
        echo "Logs for tests with platform version ${PLATFORM_VERSION}"
        echo "**********************************"
        cat platform_version-${PLATFORM_VERSION}.log
      done
  rules:
    - if: '$FORCE_SAMSUNG == "true"'
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  artifacts:
    when: always
    expire_in: "1 day"
    paths:
      - "si_automation/platform_version-*.log"
      - "si_automation/result_*"
      - "si_automation/target/"
      - "appium"
